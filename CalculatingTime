import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

def CalculateTime(weight_tea, humidity_env):

    weight = ctrl.Antecedent(np.arange(0, 6, 1), 'weight')
    humidity = ctrl.Antecedent(np.arange(0, 11, 1), 'humidity')

    time = ctrl.Consequent(np.arange(0, 24, 1), 'time')
    humidityAmt_names = ['high', 'medium', 'low']

    weight_names = ['heavy', 'medium', 'light']


    weight.automf(names = weight_names)
    humidity.automf(names = humidityAmt_names)

    time['very_short'] = fuzz.trimf(time.universe, [0, 0, 10])
    time['short'] = fuzz.trimf(time.universe, [5, 10, 15])
    time['medium'] = fuzz.trimf(time.universe, [10, 15, 20])
    time['long'] = fuzz.trimf(time.universe, [15, 20, 25])
    time['very_long'] = fuzz.trimf(time.universe, [20, 25, 25])

    rule1 = ctrl.Rule(weight['heavy'] & humidity['high'], time['medium'])
    rule2 = ctrl.Rule(weight['heavy'] & humidity['medium'] , time['long'])
    rule3 = ctrl.Rule(weight['heavy'] & humidity['low'] , time['very_long'])
    rule4 = ctrl.Rule(weight['medium'] & humidity['high'] , time['short'])
    rule5 = ctrl.Rule(weight['medium'] & humidity['medium'] , time['medium'])
    rule6 = ctrl.Rule(weight['medium'] & humidity['low'] , time['long'])
    rule7 = ctrl.Rule(weight['light'] & humidity['high'] , time['very_short'])
    rule8 = ctrl.Rule(weight['light'] & humidity['medium'], time['very_short'])
    rule9 = ctrl.Rule(weight['light'] & humidity['low'], time['long'])
    
    timing_ctrl = ctrl.ControlSystem([rule1, rule2, rule3,rule4, rule5,rule6,rule7, rule8,rule9
                                 ])
    timing = ctrl.ControlSystemSimulation(timing_ctrl)
    timing.input['weight'] = weight_tea
    timing.input['humidity'] = humidity_env

    timing.compute()
    return (timing.output['time'])

CalculateTime(weight_tea, humidity_env)


